#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

PACKAGE="next_best_view"

gen = ParameterGenerator()
sphereSampling = gen.add_group("Sphere Sampling")
spaceSampling = gen.add_group("Space Sampling")
camera = gen.add_group("Camera")
robotModel = gen.add_group("Robot Model")
rating = gen.add_group("Rating")
vis = gen.add_group("Visualization")
moduleChooser = gen.add_group("Module Chooser")
worldHelper = gen.add_group("World Helper")
other = gen.add_group("Other")

# Name, Type, Reconfiguration level, 
# Description, 
# Default, Min, Max

# sphere sampling
sphereSampling.add("sampleSizeUnitSphereSampler", int_t, 0b1 << 1, 
  "number of samples created by SpiralApproxUnitSphereSampler", 
  128, 1, 1000000000)

# space sampling
spaceSampling.add("radius", double_t, 0b1 << 3, 
  "radius of hexagons, used by MapBasedHexagonSpaceSampler", 
  0.75, 0.001, 10.0)
spaceSampling.add("sampleSizeMapBasedRandomSpaceSampler", int_t, 0b1 << 3, 
  "number of samples created by MapBasedRandomSpaceSampler", 
  100, 1, 1000000000)

# camera
# ncp and fcp are also used by robot model
camera.add("ncp", double_t, (0b1 << 4) | (0b1 << 5), 
  "Distance to NearClippingPlane in meter", 
  .5, 0.0, 2.0)
camera.add("fcp", double_t, (0b1 << 4) | (0b1 << 5), 
  "Distance to FarClippingPlane in meter", 
  5.0, 1.0, 10.0)
camera.add("fovx", double_t, 0b1 << 4, 
  "angle of horizontal field of view in degree", 
  62.5, 10, 180)
camera.add("fovy", double_t, 0b1 << 4, 
  "angle of vertical field of view in degree", 
  48.9, 10, 180)
camera.add("speedFactorRecognizer", double_t, 0b1 << 4, 
  "time usage for object detection in seconds per object", 
  5.0, 0.1, 1000.0)

# robotmodel
# some of these might be not be applied immediately, because they are read from rosparam instead of config struct.
robotModel.add("useGlobalPlanner", bool_t, 0b1 << 5, 
  "", 
  True)
robotModel.add("tolerance", double_t, 0b1 << 5, 
  "", 
  0.00003, 0.0, 10.0)
robotModel.add("panMin", double_t, 0b1 << 5, 
  "", 
  -60, -360, 0)
robotModel.add("panMax", double_t, 0b1 << 5, 
  "", 
  60, 0, 360)
robotModel.add("tiltMin", double_t, 0b1 << 5, 
  "", 
  -45, -360, 0)
robotModel.add("tiltMax", double_t, 0b1 << 5, 
  "", 
  45, 0, 360)
robotModel.add("mSigma", double_t, 0b1 << 5, 
  "", 
  1.0)
robotModel.add("panAngleSamplingStepsPerIteration", int_t, 0b1 << 5, 
  "", 
  20, 1, 1000000000)
robotModel.add("inverseKinematicIterationAccuracy", double_t, 0b1 << 5, 
  "", 
  0.005, 0.0, 10.0)
robotModel.add("colThresh", double_t, 0b1 << 5, 
  "", 
  45.0, 0.1, 100.0)

# rating
rating.add("mOmegaUtility", double_t, 0b1 << 6, 
  "coefficient for the usage", 
  1, 0.0, 1000.0)
rating.add("mOmegaPan", double_t, 0b1 << 6, 
  "coefficient for the rotation of the pan axis of the PTU", 
  1, 0.0, 1000.0)
rating.add("mOmegaTilt", double_t, 0b1 << 6, 
  "coefficient for the rotation of the tilt axis of the PTU", 
  1, 0.0, 1000.0)
rating.add("mOmegaRot", double_t, 0b1 << 6, 
  "coefficient for the rotation of the base", 
  1, 0.0, 1000.0)
rating.add("mOmegaBase", double_t, 0b1 << 6, 
  "coefficient for the movement of the base", 
  1, 0.0, 1000.0)
rating.add("mOmegaRecognizer", double_t, 0b1 << 6, 
  "", 
  1, 0.0, 1000.0)

# vis
vis.add("show_space_sampling", bool_t, 0b1 << 0, 
  "", 
  False)
vis.add("show_point_cloud", bool_t, 0b1 << 0, 
  "", 
  False)
vis.add("show_frustum_point_cloud", bool_t, 0b1 << 0, 
  "", 
  False)
vis.add("show_frustum_marker_array", bool_t, 0b1 << 0, 
  "", 
  False)
vis.add("visualizeIK", bool_t, 0b1 << 0, 
  "", 
  False)

# module chooser
sphereSamplingEnum = gen.enum([ 
    gen.const("SpiralApproxUnitSphereSampler",      	int_t, 1, "")
  ],
  "An enum to set the sphere sampling module")
moduleChooser.add("sphereSamplerId", int_t, 0b1 << 1, "sphere sampling module", 1, 1, 1, edit_method=sphereSamplingEnum)


spaceSamplingEnum = gen.enum([ 
    gen.const("MapBasedHexagonSpaceSampler",      	int_t, 1, ""),
    gen.const("MapBasedRandomSpaceSampler", 		int_t, 2, ""),
    gen.const("PlaneSubSpaceSampler",      		int_t, 3, ""),
    gen.const("Raytracing2DBasedSpaceSampler", 		int_t, 4, "")
  ],
  "An enum to set the space sampling module")
moduleChooser.add("spaceSamplerId", int_t, 0b1 << 3, "space sampling module", 1, 1, 4, edit_method=spaceSamplingEnum)


cameraEnum = gen.enum([ 
    gen.const("MapBasedStereoCameraModelFilter",      	int_t, 1, ""),
    gen.const("StereoCameraModelFilter", 		int_t, 2, ""),
    gen.const("MapBasedSingleCameraModelFilter",      	int_t, 3, ""),
    gen.const("SingleCameraModelFilter", 		int_t, 4, "")
  ],
  "An enum to set the camera model")
moduleChooser.add("cameraFilterId", int_t, 0b1 << 4, "camera model", 2, 1, 4, edit_method=cameraEnum)


robotModelEnum = gen.enum([ 
    gen.const("MILDRobotModelWithExactIK",      	int_t, 1, ""),
    gen.const("MILDRobotModelWithApproximatedIK", 	int_t, 2, "")
  ],
  "An enum to set the robot model")
moduleChooser.add("robotModelId", int_t, 0b1 << 5, "robot model", 1, 1, 2, edit_method=robotModelEnum)


ratingEnum = gen.enum([ 
    gen.const("DefaultRatingModule",      		int_t, 1, "")
  ],
  "An enum to set the rating module")
moduleChooser.add("ratingModuleId", int_t, 0b1 << 6, "rating module", 1, 1, 1, edit_method=ratingEnum)


hypothesisUpdaterEnum = gen.enum([ 
    gen.const("PerspectiveHypothesisUpdater",      	int_t, 1, "")
  ],
  "An enum to set the hypothesis updater module")
moduleChooser.add("hypothesisUpdaterId", int_t, 0b1 << 7, "hypothesis updater module", 1, 1, 1, edit_method=hypothesisUpdaterEnum)


# World Helper
worldHelper.add("worldFilePath", str_t, 0b1 << 2, 
  "",
  "")

worldHelper.add("voxelSize", double_t, 0b1 << 2, 
  "",
  0.01, 0.001, 1.0)

worldHelper.add("worldHeight", double_t, 0b1 << 2, 
  "",
  3.0, 0.0, 10.0)

# other
# mCropboxListFilePath is level 7, so cropbox xml is only reloaded if a cropboxsetting is changed
other.add("enableCropBoxFiltering", bool_t, 0b1 << 0, 
  "", 
  False)
other.add("mCropBoxListFilePath", str_t, 0b1 << 8, 
  "", 
  "NONE")
other.add("enableIntermediateObjectWeighting", bool_t, 0b1 << 0, 
  "", 
  False)
other.add("maxIterationSteps", int_t, 0b1 << 0, 
  "", 
  20, 1, 100000)
# must be implemented
# other.add("debugLevels", str_t, 0b1 << 0, 
#   "", 
#   "NONE")
  
  

exit(gen.generate(PACKAGE, "next_best_view", "DynamicParameters"))